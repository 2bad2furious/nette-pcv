<?php


use Nittro\Bridges\NittroUI\Presenter;

abstract class BasePresenter extends Presenter {
    const SOMETHING_WENT_WRONG = "global.message.something_went_wrong";

    /** @persistent */
    public $locale;

    /** @var \Kdyby\Translation\Translator @inject */
    public $translator;

    public function checkRequirements($element) {
        $this->checkCurrentIdentity();
        $this->checkRoles();
        parent::checkRequirements($element); // TODO: Change the autogenerated stub
    }

    protected function checkCurrentIdentity() {
        $id = $this->getUser()->getId();
        if (is_int($id)) {
            $newIdentity = $this->getUserManager()->getUserIdentityById($id);
            if ($newIdentity instanceof UserIdentity) {
                $this->getUser()->login($newIdentity);
            } else {
                $this->flashMessage(self::SOMETHING_WENT_WRONG);
                $this->getUser()->logout(true);
            }
        }
    }

    protected function checkRoles() {
        $allowedRoles = $this->getAllowedRoles();
        $identity = $this->getUser()->getIdentity();
        $currentRoles = $identity instanceof UserIdentity ? $identity->getRoles() : [UserManager::ROLE_GUEST];

        $isInRoles = false;

        foreach ($currentRoles as $k => $v) {
            if (in_array($v, $allowedRoles)) $isInRoles = true;
        }

        if (!$isInRoles) call_user_func($this->getCallbackWhenBadRole($allowedRoles, $currentRoles));
    }

    protected function beforeRender() {
        $this->template->locale = $this->locale;
        parent::beforeRender(); // TODO: Change the autogenerated stub
    }

    public function flashMessage($message, $type = 'info') {
        return parent::flashMessage($this->translator->translate($message), $type); // TODO: Change the autogenerated stub
    }

    public function createComponentHeader(string $name) {
        return new \HeaderPageControl($this, $name);
    }

    public function createComponentFooter(string $name) {
        return new \FooterPageControl($this, $name);
    }

    protected function getFormFactory(): FormFactory {
        return $this->context->getByType(FormFactory::class);
    }

    protected function getUserManager(): UserManager {
        return $this->context->getByType(UserManager::class);
    }

    protected function getLanguageManager(): LanguageManager {
        return $this->context->getByType(LanguageManager::class);
    }

    protected function getCallbackWhenBadRole(array $allowedRoles, array $currentRoles): callable {
        return function () use ($allowedRoles, $currentRoles) {
            throw new Exception("Bad rights xd");
        };
    }

    protected abstract function getAllowedRoles(): array;
}